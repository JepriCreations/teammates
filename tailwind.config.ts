import type { Config } from 'tailwindcss'
import { fontFamily } from 'tailwindcss/defaultTheme'

const config = {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        primary: 'hsl(var(--primary))',
        onPrimary: 'hsl(var(--onPrimary))',
        primaryContainer: 'hsl(var(--primaryContainer))',
        onPrimaryContainer: 'hsl(var(--onPrimaryContainer))',
        secondary: 'hsl(var(--secondary))',
        onSecondary: 'hsl(var(--onSecondary))',
        secondaryContainer: 'hsl(var(--secondaryContainer))',
        onSecondaryContainer: 'hsl(var(--onSecondaryContainer))',
        tertiary: 'hsl(var(--tertiary))',
        onTertiary: 'hsl(var(--onTertiary))',
        tertiaryContainer: 'hsl(var(--tertiaryContainer))',
        onTertiaryContainer: 'hsl(var(--onTertiaryContainer))',
        error: 'hsl(var(--error))',
        onError: 'hsl(var(--onError))',
        errorContainer: 'hsl(var(--errorContainer))',
        onErrorContainer: 'hsl(var(--onErrorContainer))',
        success: 'hsl(var(--success))',
        onSuccess: 'hsl(var(--onSuccess))',
        successContainer: 'hsl(var(--successContainer))',
        onSuccessContainer: 'hsl(var(--onSuccessContainer))',
        info: 'hsl(var(--info))',
        onInfo: 'hsl(var(--onInfo))',
        infoContainer: 'hsl(var(--infoContainer))',
        onInfoContainer: 'hsl(var(--onInfoContainer))',
        warning: 'hsl(var(--warning))',
        onWarning: 'hsl(var(--onWarning))',
        warningContainer: 'hsl(var(--warningContainer))',
        onWarningContainer: 'hsl(var(--onWarningContainer))',
        background: 'hsl(var(--background))',
        onBackground: 'hsl(var(--onBackground))',
        surface: 'hsl(var(--surface))',
        onSurface: 'hsl(var(--onSurface))',
        surfaceVariant: 'hsl(var(--surfaceVariant))',
        onSurfaceVariant: 'hsl(var(--onSurfaceVariant))',
        outline: 'hsl(var(--outline))',
        outlineVariant: 'hsl(var(--outlineVariant))',
        shadow: 'hsl(var(--shadow))',
        scrim: 'hsl(var(--scrim))',
        inverseSurface: 'hsl(var(--inverseSurface))',
        inverseOnSurface: 'hsl(var(--inverseOnSurface))',
        inversePrimary: 'hsl(var(--inversePrimary))',
        primaryFixed: 'hsl(var(--primaryFixed))',
        primaryFixedDim: 'hsl(var(--primaryFixedDim))',
        onPrimaryFixed: 'hsl(var(--onPrimaryFixed))',
        secondaryFixed: 'hsl(var(--secondaryFixed))',
        secondaryFixedDim: 'hsl(var(--secondaryFixedDim))',
        onSecondaryFixed: 'hsl(var(--onSecondaryFixed))',
        tertiaryFixed: 'hsl(var(--tertiaryFixed))',
        tertiaryFixedDim: 'hsl(var(--tertiaryFixedDim))',
        onTertiaryFixed: 'hsl(var(--onTertiaryFixed))',
        surfaceDim: 'hsl(var(--surfaceDim))',
        surfaceBright: 'hsl(var(--surfaceBright))',
        surfaceContainerLowest: 'hsl(var(--surfaceContainerLowest))',
        surfaceContainerLow: 'hsl(var(--surfaceContainerLow))',
        surfaceContainer: 'hsl(var(--surfaceContainer))',
        surfaceContainerHigh: 'hsl(var(--surfaceContainerHigh))',
        surfaceContainerHighest: 'hsl(var(--surfaceContainerHighest))',
      },
      opacity: {
        '4': '0.04',
        '8': '0.08',
        '12': '0.12',
        '16': '0.16',
        '38': '0.38',
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 12px)',
        sm: 'calc(var(--radius) - 16px)',
      },
      fontFamily: {
        sans: ['var(--font-sans)', ...fontFamily.sans],
      },
      fontSize: {
        'display-lg': ['3.56rem', { lineHeight: '4rem' }],
        'display-md': ['2.81rem', { lineHeight: '3.25rem' }],
        'display-sm': ['2.25rem', { lineHeight: '2.75rem' }],
        'headline-lg': ['2rem', { lineHeight: '2.5rem' }],
        'headline-md': ['1.75rem', { lineHeight: '2.25rem' }],
        'headline-sm': ['1.5rem', { lineHeight: '2rem' }],
        'title-lg': ['1.375rem', { lineHeight: '1.75rem' }],
        'title-md': ['1rem', { lineHeight: '1.5rem', fontWeight: 500 }],
        'title-sm': ['0.875rem', { lineHeight: '1.25rem', fontWeight: 500 }],
        'label-lg': ['0.875rem', { lineHeight: '1.25rem', fontWeight: 500 }],
        'label-md': ['0.75rem', { lineHeight: '1rem', fontWeight: 500 }],
        'label-sm': ['0.687rem', { lineHeight: '1rem', fontWeight: 500 }],
        'body-lg': ['1.125rem', { lineHeight: '1.5rem' }],
        'body-md': ['1rem', { lineHeight: '1.5rem' }],
        'body-sm': ['0.875rem', { lineHeight: '1.25rem' }],
      },
      transitionProperty: {
        fadeAndMove: 'transform, opacity',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
        'grown-up': {
          '0%': { opacity: '0', transform: 'scaleY(0%)' },
          '60%': { opacity: '1', transform: 'scaleY(130%)' },
          '100%': { opacity: '1', transform: 'scaleY(100%)' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'grown-up': 'grown-up 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config

export default config
